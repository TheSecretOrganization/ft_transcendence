name: ft

services:
  django:
    container_name: django
    build:
      context: django
      args:
        DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
        HOSTNAME: ${HOSTNAME}
    expose:
      - 443
    init: true
    networks:
      - network
    volumes:
      - static-files:/static
      - media-files:/media
      - ssl-keys:/ssl
    env_file:
      - .env
    develop:
      watch:
        - action: sync+restart
          path: ./django/src/
          target: /app/
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python manage.py healthcheck || exit 1"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s

  nginx:
    container_name: nginx
    build:
      context: nginx
      args:
        HOSTNAME: ${HOSTNAME}
    ports:
      - 4443:443
    init: true
    networks:
      - network
    volumes:
      - static-files:/static
      - media-files:/media
      - ssl-keys:/ssl
    env_file:
      - .env
    develop:
      watch:
        - action: sync
          path: ./nginx/src/
          target: /usr/share/nginx/
    depends_on:
      django:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s

  postgres:
    container_name: postgres
    build:
      context: postgres
    ports:
      - 5432:5432
    networks:
      - network
    volumes:
      - postgres-data:/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s

networks:
  network:
    name: network
    driver: bridge

volumes:
  static-files:
    driver: local
  media-files:
    driver: local
  postgres-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ./data/postgres
  ssl-keys:
    driver: local
